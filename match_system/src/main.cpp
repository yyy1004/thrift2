// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"

#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/ThreadFactory.h>

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/TToString.h>


#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <queue>
#include <vector>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace apache::thrift::concurrency;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::match;
using namespace std;


struct Task{
    User user;
    string type; // add or remove
};

struct MessageQueue {
    queue<Task> q;
    mutex m;
    condition_variable cv;
} message_queue;

class Pool {
    public:
        void save_result(int a,int b) {
            printf("Match Result: %d %d\n", a, b);
        }

        bool check_match(uint32_t i, uint32_t j) {
            auto a = users[i], b = users[j];

            int dt = abs(a.score - b.score);
            int a_max_dif = wt[i] * 50;
            int b_max_dif = wt[j] * 50;

            return dt <= a_max_dif && dt <= b_max_dif;
        }

        void match() {
            for (uint32_t i = 0; i < users.size(); i ++ )
                wt[i] ++ ;

            while (users.size() > 1) {
                // auto a = users[0], b = users[1];
                // users.erase(users.begin());
                // users.erase(users.begin());

                //sort(users.begin(), users.end(), [&](User &a, User &b) {
                //        return a.score < b.score;
                //        });

                bool flag = true;
                for (uint32_t i = 0; i < users.size(); i ++ ) {
                    for (uint32_t j = i + 1; j < users.size(); j ++ ) {
                        if (check_match(i, j)) {
                            auto a = users[i], b = users[j];
                            users.erase(users.begin() + j); // 先删除后面的
                            users.erase(users.begin() + i);
                            wt.erase(wt.begin() + j);
                            wt.erase(wt.begin() + i);
                            save_result(a.id, b.id);
                            flag = false;
                            break;
                        }
                    }
                    if (!flag) break;
                }
                if (flag) break;
            }
        }

        void add(User user) {
            users.push_back(user);
            wt.push_back(0);
        }

        void remove(User user) {
            for (uint32_t i = 0; i < users.size(); i ++ ) {
                if (users[i].id == user.id) {
                    users.erase(users.begin() + i);
                    wt.erase(wt.begin() + i);
                    break;
                }
            }
        }

    private:
        vector<User> users;
        vector<int> wt; // 等待时间 单位s
}pool;

class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        /**
         * user :添加的用户
         * info : 附加信息
         * 向服务器添加一名用户
         * 
         * @param user
         * @param info
         */
        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");

            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user, "add"});
            message_queue.cv.notify_all();

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");

            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user, "remove"});
            message_queue.cv.notify_all();

            return 0;
        }

};

void consume_task() {
    while (true) {
        unique_lock<mutex> lck(message_queue.m);
        if (message_queue.q.empty()) {
            //message_queue.cv.wait(lck);
            lck.unlock();
            pool.match();
            sleep(1);
        } else {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();

            if (task.type == "add") {
                pool.add(task.user);
            } else if (task.type == "remove") {
                pool.remove(task.user);
            }

            // pool.match();
        }
    }
}

class MatchCloneFactory : virtual public MatchIfFactory {
 public:
  ~MatchCloneFactory() override = default;
  MatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override
  {
    std::shared_ptr<TSocket> sock = std::dynamic_pointer_cast<TSocket>(connInfo.transport);
    // cout << "Incoming connection\n";
    // cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
    // cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
    // cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
    // cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";
    return new MatchHandler;
  }
  void releaseHandler( MatchIf* handler) override {
    delete handler;
  }
};

int main(int argc, char **argv) {
    // int port = 9090;
    // ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
    // ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
    // ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    // ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    // ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    // TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    int port = 9090;
    if (argc > 1)
        port = atoi(argv[1]);
    printf("Port:%d\n", port);

    TThreadedServer server(
            std::make_shared<MatchProcessorFactory>(std::make_shared<MatchCloneFactory>()),
            std::make_shared<TServerSocket>(port), //port
            std::make_shared<TBufferedTransportFactory>(),
            std::make_shared<TBinaryProtocolFactory>());

    cout << "Start server" << endl;

    thread matching_thread(consume_task);

    server.serve();
    return 0;
}

